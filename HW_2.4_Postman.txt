http://162.55.220.72:5005/user_info_2
1. Вставить параметр salary из окружения в request
2. Вставить параметр age из окружения в age
3. Вставить параметр name из окружения в name
4. Отправить запрос.
5. Статус код 200
6. Спарсить response body в json.
7. Спарсить request.
8. Проверить, что json response имеет параметр start_qa_salary
9. Проверить, что json response имеет параметр qa_salary_after_6_months
10. Проверить, что json response имеет параметр qa_salary_after_12_months
11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
13. Проверить, что json response имеет параметр person
14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person
pm.environment.get("salary"); // 1. Вставить параметр salary из окружения в request
pm.environment.get("age"); // 2. Вставить параметр age из окружения в age
pm.environment.get("name");// 3. Вставить параметр name из окружения в name
//4. Отправить запрос.
pm.test("Status code is 200", function () { // 5. Статус код 200
     pm.response.to.have.status(200);
});
let jsonData = pm.response.json(); // 6. Спарсить response body в json
let requestdata = request.data; // 7. Спарсить request

pm.test("check param of response salary", function () { // 8. Проверить, что json response имеет параметр start_qa_salary 
     pm.expect(jsonData).to.haveOwnProperty("start_qa_salary");
});
pm.test("check param of response salary 6", function () { // 9. Проверить, что json response имеет параметр qa_salary_after_6_months
     pm.expect(jsonData).to.haveOwnProperty("qa_salary_after_6_months");
});
pm.test("check param of response salary 12", function () { // 10. Проверить, что json response имеет параметр qa_salary_after_12_months
     pm.expect(jsonData).to.haveOwnProperty("qa_salary_after_12_months");
});
pm.test("check param of response salary 1.5y", function () { // 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
     pm.expect(jsonData).to.haveOwnProperty("qa_salary_after_1.5_year");
});
pm.test("check param of response salary 3.5y", function () { // 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
     pm.expect(jsonData).to.haveOwnProperty("qa_salary_after_3.5_years");
}); 
pm.test("check param of response person", function () { // 13. Проверить, что json response имеет параметр person
     pm.expect(jsonData).to.haveOwnProperty("person");
}); 
let requestSalary = requestdata.salary;
console.log(requestSalary);
pm.test("check param salary&salary from req", function () { // 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
     pm.expect(jsonData.start_qa_salary).to.eql(Number(requestSalary));
}); 
pm.test("check param salary 6m & salaryX2 from req", function () { // 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
    pm.expect(jsonData.qa_salary_after_6_months).to.eql(Number(requestSalary)*2);
}); 
pm.test("check param salary 12m & salaryX2.7 from req", function () { // 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
pm.expect(jsonData.qa_salary_after_12_months).to.eql(Number(requestSalary)*2.7);
}); 
let salary1_5 = jsonData["qa_salary_after_1.5_year"];
pm.test("check param salary 1.5y & salaryX3.3 from req", function () { // 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
     pm.expect(salary1_5).to.eql(Number(requestSalary)*3.3);
});
pm.test("check param salary 3.5y & salaryX3.8 from req", function () { // 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
     pm.expect(jsonData["qa_salary_after_3.5_years"]).to.eql(Number(requestSalary)*3.8);
});
let person1 = jsonData.person.u_name;
pm.test("check param person1 vs salary from req", function () { // 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
     pm.expect(person1[1]).to.eql(Number(requestSalary));
}); 
let personAge = jsonData.person.u_age;
console.log(personAge);
pm.test("check param u_age vs age from req", function () { // 20. Проверить, что параметр u_age равен age из request (age забрать из request.)
     pm.expect(personAge).to.eql(Number(requestdata.age));
});
let salary5 = jsonData.person.u_salary_5_years;
pm.test("check param salary 5y & salaryX4.2 from req", function () {// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
      pm.expect(salary5).to.eql(Number(requestSalary)*4.2);
}); 
// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
for (let i = 0; i<jsonData.person.length; i++)
break
console.log(jsonData.person);
